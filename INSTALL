Installation instructions
=========================
 
  First of all unzip / untar all files to a temporary
directory - maybe you've  done this already. 
 
  The classes of this package are all in source code. In the previous release
all files (except from the WizardExec) was in compiled form. Now I decided to
give out the source code for this project. This has some advantages and
disadvantages. First of all you have to compile on your own the files. If you
are already a Java programmer this would be a piece of cake for you. On the
other hand it's much easier for me to maintain and update only one thing (the
source files) than 2 or more (e.g. source files, examples, compiled classes
etc.). Even more, if you are not able to compile these classes, you are not
able to _use_ them.


General Instructions on compilation
-----------------------------------

  Now, some tips on how to compile these files. First of all you (may) need to
define a classpath. There you're on your own - I managed to find a Java
version which automatically detects the appropriate CLASSFILE value in Linux.
In Windows the Sun JDK does this for you. In Linux JDK 1.1.6 does it too. So,
JDK 1.1.6 (or higher) is STRONGLY recommended.
Second you have to compile all the classes one by one. Remember that some
files need to be compiled first and then the others. Also remember that all
files (except from WizardExec.class) belong to a package. So you have to
compile them with the '-d .' switch. With this option javac automatically
puts the classfile to its proper location. If the compiler compailns about
missing arguments (e.g. "Class panos.awt.wizImage not found in type
declaration.") then you should first compile the class which is complaining
about (in our example the 'wizImage.java') and then recompile the previous
file. When you've compiled everything, it's time to run the demo application.

All the source code is found under the 'src' directory. The two directories
below are support directories ('docfiles', 'images').

Examples
to compile: javac -d . wizImage.java
to run: java WizardExec

  To permanently install these files, copy all files (remember to maintain the
directory tree) to anywhere you want and remember to add this directory to the
CLASSPATH environmental variable. If you want to in stall it such a way, then
looks to me that you are an experienced user and you don't need any more help.


****************************
* O/S specific information *
****************************

Linux / Unix
------------

I tried to create a simple Makefile, in order to make the life of Unix users
easier. I don't know if I succeeded. It's my first attempt and I don't know
well how to use this tool. If you can give me any ideas on how to make it
better, PLEASE give me a note. Still, you have to edit the Makefile to suit
your needs. Go to directory src and edit the Makefile found there.

The steps to do are as follows:

1) go to 'src' directory.
2) Type 'make' or type 'make all' (without the ' of course! ).
3) To run a demo of this package, type 'make demo'.
4) To delete all source code and temporary files (including doc files), type 
   'make clean'.
5) To create document information type 'make docs'.


Winblow$ 95
-----------

Don't forget to add your personal package directory (where you installed this
package) to the CLASSPATH environmental variable, or else java couldn't find
this package.
 
Since V 0.9.1 added the ability to easily compile this package with a make-alike
batch file. The parameters are like those in Unix 'make' command (see above).
The file "MAKE.BAT" exists in the src directory.
For more information on he possible ways to use this batch file see the Linux
section above.


*************************
* After the compilation *
*************************

Remember that these files can't been executed as is. They are only useful
from another application. So, don't forget to put them somewhere your java
compiler and interprenter can read them. After the installation you can
insert the wizard component to your application. To find out everything about
the wizard methods, see USAGE.


USAGE
-----

As described already, this is NOT a stand-alone utility, is only a
component.  To use it you have to program a "caller" application, or else you
will not be able to use it. With this source file the "WizardExec.java" file
is provided. This file is a sample sceleton source file, as an example on how
to use this component. It is recomended to read the document of the Wizard
class (see in docs directory - have to make docs first! -see above ) on a
brief information on how to use this component. Usually you only have to
"talk" to this class, not to other ones. Wizard component does it for you!


Some Notes - READ ME !
======================

Some JDKs automatically add the current directory to the CLASSPATH. If this is
your case you don't need to manually change your CLASSPATH.


If you experienced any trouble with this package, please let me
know about it and e-mail me. 
I would gratefully give you any help about this component - how to compile
it, how to use the 'make' command etc. I am proud when other people use my
code!

Panos Katsaloulis
teras@writeme.com
